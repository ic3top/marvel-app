{"version":3,"sources":["components/appHeader/AppHeader.tsx","resources/images/avengers.png","resources/images/avengers_logo.png","components/appBanner/AppBanner.tsx","services/marvelService/MarvelService.ts","hooks/http.hook.ts","components/errorMessage/ErrorMessage.tsx","components/comicsList/comicsListSkeleton/ComicsListSkeleton.tsx","components/comicsList/ComicsList.tsx","pages/ComicsPage.tsx","resources/images/thor-weapon.png","resources/images/loader.svg","components/loader/Loader.tsx","components/randomChar/RandomChar.tsx","components/charList/charListSkeleton/CharListSkeleton.tsx","components/charList/CharList.tsx","components/skeleton/Skeleton.tsx","components/charInfo/CharInfo.tsx","resources/images/bg-hero.png","pages/MainPage.tsx","components/singleComic/singleComic.tsx","pages/singleComicPage/SingleComicPage.tsx","pages/NotFoundPage.tsx","components/app/App.tsx","index.tsx"],"names":["AppHeader","className","to","activeClassName","AppBanner","src","avengersImg","alt","avengersLogoImg","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","json","data","code","Error","status","message","clearError","useHttp","baseUrl","apiKey","process","getAllCharacters","offset","res","results","getCharacterById","id","then","getRandomCharacter","randId","Math","floor","random","getAllComics","getComicById","ErrorMessage","label","ComicsListSkeleton","comicsAmount","Array","keys","map","n","ComicsList","comics","setComics","setOffset","onRequest","comicsOffset","newComics","prev","finally","prevOffset","useEffect","comicsList","item","i","thumbnail","path","extension","title","prices","price","errorMessage","skeleton","onClick","ComicsPage","Helmet","name","content","Loader","loaderImg","style","margin","display","RandomCharView","char","description","urls","href","type","RandomChar","character","setCharacter","fetchRandomCharacter","loader","thorWeaponImg","CharListSkeleton","cardsAmount","CHARS_OFFSET","CharList","selectChar","chars","setChars","selectedCharId","setSelectedCharId","loadChars","Promise","resolve","onCharListLoaded","onSelectChar","newChars","prevChars","concat","windowOnScroll","document","documentElement","scrollTop","scrollHeight","clientHeight","window","addEventListener","removeEventListener","charsContent","ch","hasImg","includes","tabIndex","onKeyPress","e","key","objectFit","Skeleton","CharInfo","charId","View","slice","items","length","MainPage","selectedChar","setSelectedChar","bgHeroImg","ComicView","comic","pageCount","textObjects","language","SingleComic","comicId","useParams","setComic","SingleComicPage","NotFoundPage","marginTop","textAlign","App","exact","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.68e46272.chunk.js","sourcesContent":["import { NavLink, Link } from 'react-router-dom';\r\n\r\nimport './appHeader.scss';\r\n\r\nexport const AppHeader = () => (\r\n  <header className=\"app__header\">\r\n    <h1 className=\"app__title\">\r\n      <Link to=\"/\">\r\n        <span>Marvel</span>\r\n        {' '}\r\n        information portal\r\n      </Link>\r\n    </h1>\r\n    <nav className=\"app__menu\">\r\n      <ul className=\"navigation\">\r\n        <li className=\"navigation__item\"><NavLink to=\"/characters\" activeClassName=\"navigation__item_active\">Characters</NavLink></li>\r\n        /\r\n        <li className=\"navigation__item\"><NavLink to=\"/comics\" activeClassName=\"navigation__item_active\">Comics</NavLink></li>\r\n      </ul>\r\n    </nav>\r\n  </header>\r\n);\r\n","export default __webpack_public_path__ + \"static/media/avengers.c29e0ef0.png\";","export default __webpack_public_path__ + \"static/media/avengers_logo.9b944f71.png\";","import './appBanner.scss';\r\nimport avengersImg from '../../resources/images/avengers.png';\r\nimport avengersLogoImg from '../../resources/images/avengers_logo.png';\r\n\r\nexport const AppBanner = () => (\r\n  <div className=\"app__banner\">\r\n    <img src={avengersImg} alt=\"Avengers\" />\r\n    <div className=\"app__banner-text\">\r\n      New comics every week!\r\n      <br />\r\n      Stay tuned!\r\n    </div>\r\n    <img src={avengersLogoImg} alt=\"Avengers logo\" />\r\n  </div>\r\n);\r\n","import { AllCharactersRes } from '../../models/AllCharactersRes';\r\nimport { Character } from '../../models/Caracter';\r\nimport { useHttp } from '../../hooks/http.hook';\r\nimport { AllComicsRes } from '../../models/AllComicsRes';\r\nimport { Comic } from '../../models/Comic';\r\n\r\nexport const useMarvelService = () => {\r\n  const {\r\n    loading, request, error, clearError,\r\n  } = useHttp();\r\n  const baseUrl = 'https://gateway.marvel.com:443/v1/public';\r\n  const apiKey = process.env.REACT_APP_API_KEY;\r\n  const baseCharOffset = 210;\r\n  const baseComicsOffset = 0;\r\n\r\n  const getAllCharacters = async (offset: number = baseCharOffset): Promise<Character[]> => {\r\n    const res = await request<AllCharactersRes>(`${baseUrl}/characters?limit=9&offset=${offset}&${apiKey}`);\r\n    return res.data.results;\r\n  };\r\n\r\n  const getCharacterById = (id: number | string): Promise<Character> => request<AllCharactersRes>(`${baseUrl}/characters/${id}?${apiKey}`)\r\n    .then((res) => res.data.results[0]);\r\n\r\n  const getRandomCharacter = async (): Promise<Character> => {\r\n    const randId = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n    return getCharacterById(randId);\r\n  };\r\n\r\n  const getAllComics = async (offset = baseComicsOffset): Promise<Comic[]> => request<AllComicsRes>(`${baseUrl}/comics?orderBy=issueNumber%2Cmodified&limit=8&offset=${offset}&${apiKey}`)\r\n    .then((res) => res.data.results);\r\n\r\n  const getComicById = async (id: string | number): Promise<Comic> => request<AllComicsRes>(`${baseUrl}/comics/${id}?${apiKey}`)\r\n    .then((res) => res.data.results[0]);\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacterById,\r\n    getRandomCharacter,\r\n    getAllComics,\r\n    getComicById,\r\n  };\r\n};\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<null | string>(null);\r\n\r\n  const request = useCallback(async <ResType>(\r\n    url: string,\r\n    method: string = 'GET',\r\n    body = null,\r\n    headers:{[key: string]: string} = { 'Content-Type': 'application/json' },\r\n  ): Promise<ResType> => {\r\n    setLoading(true);\r\n    try {\r\n      const response = await fetch(url, { method, body, headers });\r\n      const data = await response.json();\r\n      if (data.code === 404) {\r\n        throw Error(data.status);\r\n      }\r\n      setLoading(false);\r\n\r\n      return data;\r\n    } catch (e) {\r\n      setLoading(false);\r\n      if (e instanceof Error) {\r\n        setError(e.message);\r\n      }\r\n      throw e;\r\n    }\r\n  }, []);\r\n\r\n  const clearError = useCallback(() => setError(null), []);\r\n\r\n  return {\r\n    loading, request, error, clearError,\r\n  };\r\n};\r\n","import './errorMessage.scss';\r\n\r\nexport const ErrorMessage = ({ label = 'Hydra is currently attacking, sorry' }: {label?: string}) => (\r\n  <div className=\"app__error-message\">\r\n    <span>404</span>\r\n    <p>{label}</p>\r\n  </div>\r\n);\r\n","import './ComicsListSkeleton.scss';\r\n\r\nexport const ComicsListSkeleton = ({ comicsAmount = 8 }: {comicsAmount?: number}) => (\r\n  <>\r\n    {\r\n            [...Array(comicsAmount).keys()]\r\n              .map((n) => (\r\n                <li className=\"comics__item\" key={n}>\r\n                  <div className=\"pulse skeleton__comics-img\" />\r\n                  <div className=\"pulse skeleton__comics-title\" />\r\n                </li>\r\n              ))\r\n        }\r\n  </>\r\n);\r\n","import { Link } from 'react-router-dom';\r\n\r\nimport './comicsList.scss';\r\nimport { useEffect, useState } from 'react';\r\nimport { useMarvelService } from '../../services/marvelService/MarvelService';\r\nimport { Comic } from '../../models/Comic';\r\nimport { ErrorMessage } from '../errorMessage/ErrorMessage';\r\nimport { ComicsListSkeleton } from './comicsListSkeleton/ComicsListSkeleton';\r\n\r\nexport const ComicsList = () => {\r\n  const { loading, error, getAllComics } = useMarvelService();\r\n  const [comics, setComics] = useState<Comic[]>([]);\r\n  const [offset, setOffset] = useState(0);\r\n\r\n  const onRequest = (comicsOffset: number) => {\r\n    getAllComics(comicsOffset)\r\n      .then((newComics) => setComics((prev) => [...prev, ...newComics]))\r\n      .finally(() => setOffset((prevOffset) => prevOffset + 8));\r\n  };\r\n\r\n  useEffect(() => {\r\n    onRequest(offset);\r\n  }, []);\r\n\r\n  const renderComics = (arr: Comic[]) => arr.map((item, i) => (\r\n    // eslint-disable-next-line react/no-array-index-key\r\n    <li className=\"comics__item\" key={i}>\r\n      <Link to={`comics/${item.id}`}>\r\n        <img src={`${item.thumbnail.path}.${item.thumbnail.extension}`} alt={item.title} className=\"comics__item-img\" />\r\n        <div className=\"comics__item-name\">{item.title}</div>\r\n        <div className=\"comics__item-price\">{item.prices[0].price}</div>\r\n      </Link>\r\n    </li>\r\n  ));\r\n\r\n  const comicsList = renderComics(comics);\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const skeleton = loading ? <ComicsListSkeleton /> : null;\r\n\r\n  return (\r\n    <div className=\"comics__list\">\r\n      <ul className=\"comics__grid\">\r\n        {comicsList}\r\n        {errorMessage}\r\n        {skeleton}\r\n      </ul>\r\n      {!loading && (\r\n      <button className=\"button button__main button__long\" onClick={() => onRequest(offset)}>\r\n        <div className=\"inner\">load more</div>\r\n      </button>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import { Helmet } from 'react-helmet';\r\n\r\nimport { AppBanner } from '../components/appBanner/AppBanner';\r\nimport { ComicsList } from '../components/comicsList/ComicsList';\r\n\r\nexport const ComicsPage = () => (\r\n  <>\r\n    <Helmet>\r\n      <meta\r\n        name=\"description\"\r\n        content=\"Marvel comics catalog\"\r\n      />\r\n      <title>Marvel comics</title>\r\n    </Helmet>\r\n    <AppBanner />\r\n    <ComicsList />\r\n  </>\r\n);\r\n","export default __webpack_public_path__ + \"static/media/thor-weapon.b10f8e63.png\";","export default __webpack_public_path__ + \"static/media/loader.8ee2fdff.svg\";","import loaderImg from '../../resources/images/loader.svg';\r\n\r\nexport const Loader = () => <img src={loaderImg} alt=\"loader\" style={{ margin: 'auto', display: 'block' }} />;\r\n","import './randomChar.scss';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport thorWeaponImg from '../../resources/images/thor-weapon.png';\r\nimport { Character } from '../../models/Caracter';\r\nimport { useMarvelService } from '../../services/marvelService/MarvelService';\r\nimport { Loader } from '../loader/Loader';\r\nimport { ErrorMessage } from '../errorMessage/ErrorMessage';\r\n\r\nconst RandomCharView = ({ char }: {char: Character}) => {\r\n  const {\r\n    thumbnail, description, name, urls,\r\n  } = char;\r\n  return (\r\n    <div className=\"random-char__left\">\r\n      <img src={`${thumbnail?.path}.${thumbnail?.extension}`} alt=\"randomly picked marvel hero\" className=\"random-char__img\" />\r\n      <div className=\"random-char__info\">\r\n        <p className=\"random-char__name title title_fs-22 title_upper\">{name}</p>\r\n        <p className=\"random-char__descr text\">\r\n          {description || 'The information about this character was not found. To read more - follow the links below'}\r\n        </p>\r\n        <div className=\"random-char__buttons\">\r\n          <a href={urls?.[0].url} className=\"button button__main\">\r\n            <span className=\"inner\">{urls?.[0].type}</span>\r\n          </a>\r\n          <a href={urls?.[1].url} className=\"button button__secondary\">\r\n            <span className=\"inner\">{urls?.[1].type}</span>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const RandomChar = () => {\r\n  const [character, setCharacter] = useState({} as Character);\r\n  const {\r\n    getRandomCharacter, loading, error, clearError,\r\n  } = useMarvelService();\r\n\r\n  function fetchRandomCharacter() {\r\n    clearError();\r\n    getRandomCharacter().then(setCharacter);\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchRandomCharacter();\r\n  }, []);\r\n\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const loader = loading ? <Loader /> : null;\r\n  const content = !(loading || error) ? <RandomCharView char={character} /> : null;\r\n\r\n  return (\r\n    <div className=\"random-char\">\r\n      {errorMessage}\r\n      {loader}\r\n      {content}\r\n      <div className=\"random-char__right\">\r\n        <div className=\"random-char__title title title_fs-24 title_white\">\r\n          Random character for today!\r\n          Do you want to get to know him better?\r\n        </div>\r\n        <div className=\"random-char__title  title title_fs-24 title_white\">Or choose another one</div>\r\n        <button className=\"button button__main\" onClick={fetchRandomCharacter}>\r\n          <span className=\"inner\">Try it</span>\r\n        </button>\r\n        <img src={thorWeaponImg} alt=\"mjolnir with a shield\" className=\"random-char__decoration\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import './charListSkeleton.scss';\r\n\r\nexport const CharListSkeleton = ({ cardsAmount = 9 }: {cardsAmount?: number}) => (\r\n  <>\r\n    {\r\n            [...Array(cardsAmount).keys()]\r\n              .map((n) => (\r\n                <li className=\"char__item\" key={n}>\r\n                  <div className=\"pulse skeleton__card-img\" />\r\n                  <div className=\"pulse skeleton__card-title\" />\r\n                </li>\r\n              ))\r\n        }\r\n  </>\r\n);\r\n","import './charList.scss';\r\nimport { useEffect, useState } from 'react';\r\nimport { useMarvelService } from '../../services/marvelService/MarvelService';\r\nimport { Character } from '../../models/Caracter';\r\nimport { CharListSkeleton } from './charListSkeleton/CharListSkeleton';\r\n\r\nlet CHARS_OFFSET: number = 210;\r\n\r\n// eslint-disable-next-line no-unused-vars\r\nexport const CharList = ({ selectChar }: {selectChar: (id: number) => void}) => {\r\n  const [chars, setChars] = useState<Character[]>([]);\r\n  const [selectedCharId, setSelectedCharId] = useState<number | null>(null);\r\n  const { loading, getAllCharacters } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    const windowOnScroll = () => {\r\n      const {\r\n        scrollTop,\r\n        scrollHeight,\r\n        clientHeight,\r\n      } = document.documentElement;\r\n\r\n      if (scrollTop + clientHeight >= scrollHeight - 5) {\r\n        loadChars();\r\n      }\r\n    };\r\n    loadChars().then(() => window.addEventListener('scroll', windowOnScroll));\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', windowOnScroll);\r\n    };\r\n  }, []);\r\n\r\n  function loadChars(): Promise<void> {\r\n    if (loading) return new Promise((resolve) => resolve());\r\n    return getAllCharacters(CHARS_OFFSET)\r\n      .then(onCharListLoaded)\r\n      .finally(() => {\r\n        CHARS_OFFSET += 9;\r\n      });\r\n  }\r\n\r\n  function onSelectChar(id: number) {\r\n    selectChar(id);\r\n    setSelectedCharId(id);\r\n  }\r\n\r\n  function onCharListLoaded(newChars: Character[]) {\r\n    setChars((prevChars) => prevChars.concat(newChars));\r\n  }\r\n\r\n  const charsContent = chars.map((ch) => {\r\n    const hasImg = ch.thumbnail.path?.includes('not_available');\r\n    return (\r\n      <li\r\n        className={`char__item${selectedCharId === ch.id ? ' char__item_selected' : ''}`}\r\n        tabIndex={0}\r\n        key={ch.id}\r\n        onClick={() => onSelectChar(ch.id)}\r\n        onKeyPress={(e) => {\r\n          if (e.key === ' ' || e.key === 'Enter') {\r\n            onSelectChar(ch.id);\r\n          }\r\n        }}\r\n      >\r\n        <img\r\n          src={`${ch.thumbnail.path}.${ch.thumbnail.extension}`}\r\n          alt={ch.name}\r\n          style={{ objectFit: hasImg ? 'unset' : 'cover' }}\r\n        />\r\n        <span className=\"title title_upper title_white title_fs-22\">{ch.name}</span>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"char__list\">\r\n      <ul className=\"char__grid\">\r\n        {charsContent}\r\n        {loading && <CharListSkeleton />}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import './skeleton.scss';\r\n\r\nexport const Skeleton = () => (\r\n  <>\r\n    <p className=\"char__select\">Please select a character to see information</p>\r\n    <div className=\"skeleton\">\r\n      <div className=\"pulse skeleton__header\">\r\n        <div className=\"pulse skeleton__circle\" />\r\n        <div className=\"pulse skeleton__block\" />\r\n      </div>\r\n      <div className=\"pulse skeleton__block\" />\r\n      <div className=\"pulse skeleton__mini\" />\r\n      <div className=\"pulse skeleton__mini\" />\r\n      <div className=\"pulse skeleton__mini\" />\r\n      <div className=\"pulse skeleton__mini\" />\r\n      <div className=\"pulse skeleton__mini\" />\r\n      <div className=\"pulse skeleton__mini\" />\r\n      <div className=\"pulse skeleton__mini\" />\r\n      <div className=\"pulse skeleton__mini\" />\r\n      <div className=\"pulse skeleton__mini\" />\r\n      <div className=\"pulse skeleton__mini\" />\r\n    </div>\r\n  </>\r\n);\r\n","import './charInfo.scss';\r\nimport { useEffect, useState } from 'react';\r\nimport { Skeleton } from '../skeleton/Skeleton';\r\nimport { Character } from '../../models/Caracter';\r\nimport { useMarvelService } from '../../services/marvelService/MarvelService';\r\nimport { ErrorMessage } from '../errorMessage/ErrorMessage';\r\n\r\ninterface CharInfoProps {\r\n    charId?: number;\r\n}\r\n\r\nexport const CharInfo = ({ charId }: CharInfoProps) => {\r\n  const [character, setCharacter] = useState<Character | null>(null);\r\n  const {\r\n    getCharacterById, loading, error, clearError,\r\n  } = useMarvelService();\r\n\r\n  const skeleton = !loading || error ? null : <Skeleton />;\r\n  const errorMessage = error ? <ErrorMessage /> : null;\r\n  const content = !(loading || error || !character) ? <View char={character} /> : null;\r\n\r\n  useEffect(() => {\r\n    if (charId) {\r\n      clearError();\r\n      getCharacterById(charId)\r\n        .then(setCharacter);\r\n    }\r\n  }, [charId]);\r\n\r\n  return (\r\n    <>\r\n      {charId && (\r\n      <div className=\"char__info\">\r\n        {skeleton}\r\n        {errorMessage}\r\n        {content}\r\n      </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst View = ({ char }: { char: Character }) => {\r\n  const hasImg = char.thumbnail.path?.includes('not_available');\r\n  return (\r\n    <>\r\n      <div className=\"char__basics\">\r\n        <img\r\n          src={`${char.thumbnail.path}.${char.thumbnail.extension}`}\r\n          alt={char.name}\r\n          style={{ objectFit: hasImg ? 'unset' : 'cover' }}\r\n        />\r\n        <div>\r\n          <div className=\"title title_fs-22 title_upper\">{char.name}</div>\r\n          <div className=\"char__btns\">\r\n            {char.urls.map((url) => (\r\n              <a href={url.url} key={url.url} className=\"button button__secondary\">\r\n                <div className=\"inner\">{url.type}</div>\r\n              </a>\r\n            )).slice(0, 2)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"char__descr\">\r\n        {char.description || 'Unfortunately, no description was found for this character.'}\r\n      </div>\r\n      {!!char.comics.items?.length\r\n            && (\r\n            <>\r\n              <div className=\"char__comics\">Comics:</div>\r\n              <ul className=\"char__comics-list\">\r\n                {\r\n                      char.comics.items?.map((item, i) => {\r\n                        if (i > 9) return;\r\n                        return (\r\n                        // eslint-disable-next-line react/no-array-index-key\r\n                          <li className=\"char__comics-item\" key={i}>{item.name}</li>\r\n                        );\r\n                      })\r\n                  }\r\n              </ul>\r\n            </>\r\n            )}\r\n    </>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/bg-hero.4d6f9671.png\";","import { useState } from 'react';\r\nimport { Helmet } from 'react-helmet';\r\nimport { RandomChar } from '../components/randomChar/RandomChar';\r\nimport { CharList } from '../components/charList/CharList';\r\nimport { CharInfo } from '../components/charInfo/CharInfo';\r\nimport bgHeroImg from '../resources/images/bg-hero.png';\r\n\r\nexport const MainPage = () => {\r\n  const [selectedChar, setSelectedChar] = useState<number | undefined>();\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <meta\r\n          name=\"description\"\r\n          content=\"Marvel characters/comics catalog\"\r\n        />\r\n        <title>Marvel characters</title>\r\n      </Helmet>\r\n      <RandomChar />\r\n      <div className=\"char__content\">\r\n        <CharList selectChar={(id) => setSelectedChar(id)} />\r\n        <CharInfo charId={selectedChar} />\r\n        <img className=\"bg-decoration\" src={bgHeroImg} alt=\"vision\" />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import { Link, useParams } from 'react-router-dom';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport './singleComic.scss';\r\n\r\nimport { Helmet } from 'react-helmet';\r\nimport { Comic } from '../../models/Comic';\r\nimport { useMarvelService } from '../../services/marvelService/MarvelService';\r\nimport { ErrorMessage } from '../errorMessage/ErrorMessage';\r\nimport { Loader } from '../loader/Loader';\r\n\r\nconst ComicView = ({ comic }: { comic: Comic }) => (\r\n  <div className=\"single-comic\">\r\n    <Helmet>\r\n      <meta\r\n        name=\"description\"\r\n        content={`${comic.title} comic book`}\r\n      />\r\n      <title>{comic.title}</title>\r\n    </Helmet>\r\n    <img src={`${comic.thumbnail?.path}.${comic.thumbnail?.extension}`} alt={comic.title} className=\"single-comic__img\" />\r\n    <div className=\"single-comic__info\">\r\n      <h2 className=\"single-comic__name\">{comic.title}</h2>\r\n      <p className=\"single-comic__descr\">{comic.description}</p>\r\n      <p className=\"single-comic__descr\">\r\n        {comic.pageCount}\r\n        {' '}\r\n        pages.\r\n      </p>\r\n      <p className=\"single-comic__descr\">\r\n        Language:\r\n        {comic.textObjects?.[0].language}\r\n      </p>\r\n      {comic.prices?.map((i) => {\r\n        if (!i.type || !i.price) return;\r\n        return (\r\n          <div className=\"single-comic__price\">\r\n            {i.type}\r\n            :\r\n            {' '}\r\n            {i.price}\r\n            $\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n    <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n  </div>\r\n);\r\n\r\nexport const SingleComic = () => {\r\n  const { comicId } = useParams<{comicId: string}>();\r\n  const [comic, setComic] = useState<Comic>({} as Comic);\r\n  const {\r\n    getComicById, error, loading, clearError,\r\n  } = useMarvelService();\r\n\r\n  useEffect(() => {\r\n    clearError();\r\n    getComicById(comicId).then(setComic);\r\n  }, [comicId]);\r\n\r\n  const content = !error && !loading ? <ComicView comic={comic} /> : null;\r\n\r\n  return (\r\n    <>\r\n      {content}\r\n      {loading && <Loader />}\r\n      {error && <ErrorMessage />}\r\n    </>\r\n  );\r\n};\r\n","import { SingleComic } from '../../components/singleComic/singleComic';\r\n\r\nexport const SingleComicPage = () => <SingleComic />;\r\n","import { Helmet } from 'react-helmet';\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { ErrorMessage } from '../components/errorMessage/ErrorMessage';\r\n\r\nexport const NotFoundPage = () => (\r\n  <>\r\n    <Helmet>\r\n      <meta\r\n        name=\"description\"\r\n        content=\"Marvel not found page\"\r\n      />\r\n      <title>Marvel not found</title>\r\n    </Helmet>\r\n    <div style={{ marginTop: '100px', textAlign: 'center' }}>\r\n      <ErrorMessage label=\"Hydra stole this page, try another pass or...\" />\r\n      <Link style={{ marginTop: '100px' }} to=\"/characters\">Go to home page</Link>\r\n    </div>\r\n  </>\r\n);\r\n","import {\r\n  HashRouter as Router, Redirect, Route, Switch,\r\n} from 'react-router-dom';\r\nimport { AppHeader } from '../appHeader/AppHeader';\r\nimport {\r\n  ComicsPage, MainPage, NotFoundPage, SingleComicPage,\r\n} from '../../pages';\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div className=\"app\">\r\n        <AppHeader />\r\n        <main>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <Redirect to=\"/characters\" />\r\n            </Route>\r\n            <Route exact path=\"/characters\">\r\n              <MainPage />\r\n            </Route>\r\n            <Route exact path=\"/comics\">\r\n              <ComicsPage />\r\n            </Route>\r\n            <Route path=\"/comics/:comicId\">\r\n              <SingleComicPage />\r\n            </Route>\r\n            <Route>\r\n              <NotFoundPage />\r\n            </Route>\r\n          </Switch>\r\n        </main>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/app/App';\r\n\r\nimport './styles/styles.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}
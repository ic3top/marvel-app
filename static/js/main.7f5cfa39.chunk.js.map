{"version":3,"sources":["components/appHeader/AppHeader.tsx","resources/images/avengers.png","resources/images/avengers_logo.png","components/appBanner/AppBanner.tsx","services/marvelService/MarvelService.ts","hooks/http.hook.ts","components/errorMessage/ErrorMessage.tsx","components/comicsList/comicsListSkeleton/ComicsListSkeleton.tsx","components/comicsList/ComicsList.tsx","pages/ComicsPage.tsx","resources/images/thor-weapon.png","resources/images/loader.svg","components/loader/Loader.tsx","components/randomChar/RandomChar.tsx","components/charList/charListSkeleton/CharListSkeleton.tsx","components/charList/CharList.tsx","components/skeleton/Skeleton.tsx","components/charInfo/CharInfo.tsx","resources/images/bg-hero.png","pages/MainPage.tsx","components/singleComic/singleComic.tsx","pages/singleComicPage/SingleComicPage.tsx","components/app/App.tsx","index.tsx"],"names":["AppHeader","className","to","activeClassName","AppBanner","src","avengersImg","alt","avengersLogoImg","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","json","data","code","Error","status","message","clearError","useHttp","baseUrl","apiKey","process","getAllCharacters","offset","res","results","getCharacterById","id","then","getRandomCharacter","randId","Math","floor","random","getAllComics","getComicById","ErrorMessage","label","ComicsListSkeleton","comicsAmount","Array","keys","map","n","ComicsList","comics","setComics","setOffset","useEffect","onRequest","newComics","prev","finally","prevOffset","comicsList","item","i","thumbnail","path","extension","title","prices","price","errorMessage","skeleton","onClick","ComicsPage","Loader","loaderImg","style","margin","display","RandomCharView","char","description","name","urls","href","type","RandomChar","character","setCharacter","fetchRandomCharacter","loader","content","thorWeaponImg","CharListSkeleton","cardsAmount","CHARS_OFFSET","CharList","selectChar","chars","setChars","selectedCharId","setSelectedCharId","loadChars","Promise","resolve","reject","onCharListLoaded","onSelectChar","newChars","prevChars","concat","windowOnScroll","document","documentElement","scrollTop","scrollHeight","clientHeight","window","addEventListener","removeEventListener","charsContent","ch","hasImg","includes","tabIndex","onKeyPress","e","key","objectFit","Skeleton","CharInfo","charId","View","items","length","MainPage","selectedChar","setSelectedChar","bgHeroImg","ComicView","comic","pageCount","textObjects","language","SingleComic","comicId","useParams","setComic","SingleComicPage","App","exact","ReactDOM","render","StrictMode","getElementById"],"mappings":"saAIaA,EAAY,WACrB,OACI,yBAAQC,UAAU,cAAlB,UACI,oBAAIA,UAAU,aAAd,SACI,eAAC,IAAD,CAAMC,GAAG,IAAT,UACI,0CADJ,2BAIJ,qBAAKD,UAAU,YAAf,SACI,qBAAIA,UAAU,aAAd,UACI,oBAAIA,UAAU,mBAAd,SAAiC,cAAC,IAAD,CAASC,GAAG,cAAcC,gBAAgB,0BAA1C,0BADrC,IAGI,oBAAIF,UAAU,mBAAd,SAAiC,cAAC,IAAD,CAASC,GAAG,UAAUC,gBAAgB,0BAAtC,+BChBtC,G,MAAA,IAA0B,sCCA1B,MAA0B,0CCI5BC,EAAY,WACrB,OACI,sBAAKH,UAAU,cAAf,UACI,qBAAKI,IAAKC,EAAaC,IAAI,aAC3B,sBAAKN,UAAU,mBAAf,mCAC0B,uBAD1B,iBAIA,qBAAKI,IAAKG,EAAiBD,IAAI,sB,+CCN9BE,EAAmB,WAC5B,MCLmB,WACnB,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA0BF,mBAAwB,MAAlD,mBAAOG,EAAP,KAAcC,EAAd,KAEMC,EAAUC,sBAAW,uCAAC,WACxBC,GADwB,mCAAAC,EAAA,6DAExBC,EAFwB,+BAEP,MACjBC,EAHwB,+BAGjB,KACPC,EAJwB,+BAIU,CAAC,eAAgB,oBAEnDT,GAAW,GANa,kBAQGU,MAAML,EAAK,CAACE,SAAQC,OAAMC,YAR7B,cAQdE,EARc,iBASDA,EAASC,OATR,WAUF,OADZC,EATc,QAUXC,KAVW,uBAWVC,MAAMF,EAAKG,QAXD,eAapBhB,GAAW,GAbS,kBAeba,GAfa,wCAiBpBb,GAAW,GACP,gBAAae,OACbb,EAAS,KAAEe,SAnBK,+DAAD,sDAuBxB,IAIH,MAAO,CAAClB,UAASI,UAASF,QAAOiB,WAFdd,uBAAY,kBAAMF,EAAS,QAAO,KDxBLiB,GAAxCpB,EAAR,EAAQA,QAASI,EAAjB,EAAiBA,QAASF,EAA1B,EAA0BA,MAAOiB,EAAjC,EAAiCA,WAC3BE,EAAU,2CACVC,EAASC,0CAITC,EAAgB,uCAAG,0CAAAjB,EAAA,6DAAOkB,EAAP,+BAHF,IAGE,SACLrB,EAAO,UAAsBiB,EAAtB,sCAA2DI,EAA3D,YAAqEH,IADvE,cACjBI,EADiB,yBAEdA,EAAIZ,KAAKa,SAFK,2CAAH,qDAKhBC,EAAmB,SAACC,GACtB,OAAOzB,EAAO,UAAsBiB,EAAtB,uBAA4CQ,EAA5C,YAAkDP,IAC3DQ,MAAK,SAAAJ,GAAG,OAAIA,EAAIZ,KAAKa,QAAQ,OAGhCI,EAAkB,uCAAG,4BAAAxB,EAAA,6DACjByB,EAASC,KAAKC,MAAM,IAAAD,KAAKE,SAAiC,QADzC,SAEVP,EAAiBI,GAFP,mFAAH,qDAKlBI,EAAY,uCAAG,wCAAA7B,EAAA,6DAAOkB,EAAP,+BAjBI,EAiBJ,kBACVrB,EAAO,UAAkBiB,EAAlB,iEAAkFI,EAAlF,YAA4FH,IACrGQ,MAAK,SAAAJ,GAAG,OAAIA,EAAIZ,KAAKa,YAFT,2CAAH,qDAKZU,EAAY,uCAAG,WAAOR,GAAP,SAAAtB,EAAA,+EACVH,EAAO,UAAkBiB,EAAlB,mBAAoCQ,EAApC,YAA0CP,IACnDQ,MAAK,SAAAJ,GAAG,OAAIA,EAAIZ,KAAKa,QAAQ,OAFjB,2CAAH,sDAKlB,MAAO,CACH3B,UACAE,QACAiB,aACAK,mBACAI,mBACAG,qBACAK,eACAC,iBE5CKC,G,MAAe,SAAC,GAAD,QAAEC,aAAF,MAAU,sCAAV,SACxB,sBAAKjD,UAAU,qBAAf,UACI,uCACA,4BAAIiD,SCHCC,G,MAAqB,SAAC,GAAD,QAAEC,oBAAF,MAAiB,EAAjB,SAC9B,mCAEQ,YAAIC,MAAMD,GAAcE,QACnBC,KAAI,SAACC,GAAD,OACD,qBAAIvD,UAAU,eAAd,UACI,qBAAKA,UAAU,+BACf,qBAAKA,UAAU,mCAFeuD,UCEzCC,EAAa,WACtB,MAAyChD,IAAjCE,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,MAAOkC,EAAxB,EAAwBA,aACxB,EAA4BrC,mBAAkB,IAA9C,mBAAOgD,EAAP,KAAeC,EAAf,KACA,EAA4BjD,mBAAS,GAArC,mBAAO0B,EAAP,KAAewB,EAAf,KAEAC,qBAAU,WACNC,EAAU1B,KACX,IAEH,IAAM0B,EAAY,SAAC1B,GACfW,EAAaX,GACRK,MAAK,SAAAsB,GAAS,OAAIJ,GAAU,SAACK,GAAD,4BAAcA,GAAd,YAAuBD,UACnDE,SAAQ,kBAAML,GAAU,SAAAM,GAAU,OAAIA,EAAa,SAiBtDC,EAA0BT,EAbjBH,KAAI,SAACa,EAAMC,GAClB,OACI,oBAAIpE,UAAU,eAAd,SACI,eAAC,IAAD,CAAMC,GAAE,iBAAYkE,EAAK5B,IAAzB,UACI,qBAAKnC,IAAK+D,EAAKE,UAAUC,KAAO,IAAMH,EAAKE,UAAUE,UAAWjE,IAAK6D,EAAKK,MAAOxE,UAAU,qBAC3F,qBAAKA,UAAU,oBAAf,SAAoCmE,EAAKK,QACzC,qBAAKxE,UAAU,qBAAf,SAAqCmE,EAAKM,OAAO,GAAGC,YAJ1BN,MAYxCO,EAAe/D,EAAQ,cAAC,EAAD,IAAkB,KACzCgE,EAAWlE,EAAU,cAAC,EAAD,IAAwB,KAEnD,OACI,sBAAKV,UAAU,eAAf,UACI,qBAAIA,UAAU,eAAd,UACKkE,EACAS,EACAC,MAEHlE,GAAW,wBAAQV,UAAU,mCAAmC6E,QAAS,kBAAMhB,EAAU1B,IAA9E,SACX,qBAAKnC,UAAU,QAAf,6BC/CD8E,EAAa,kBACtB,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,QCNO,G,MAAA,IAA0B,yCCA1B,MAA0B,mCCE5BC,EAAS,kBAAM,qBAAK3E,IAAK4E,EAAW1E,IAAI,SAAS2E,MAAO,CAAEC,OAAQ,OAAQC,QAAS,YCO1FC,EAAiB,SAAC,GAA+B,IAA9BC,EAA6B,EAA7BA,KACdhB,EAAsCgB,EAAtChB,UAAWiB,EAA2BD,EAA3BC,YAAaC,EAAcF,EAAdE,KAAMC,EAAQH,EAARG,KACrC,OACI,sBAAKxF,UAAU,oBAAf,UACI,qBAAKI,KAAc,OAATiE,QAAS,IAATA,OAAA,EAAAA,EAAWC,MAAO,KAAlB,OAAwBD,QAAxB,IAAwBA,OAAxB,EAAwBA,EAAWE,WAAWjE,IAAI,8BAA8BN,UAAU,qBACpG,sBAAKA,UAAU,oBAAf,UACI,mBAAGA,UAAU,kDAAb,SAAgEuF,IAChE,mBAAGvF,UAAU,0BAAb,SACKsF,GAAe,8FAEpB,sBAAKtF,UAAU,uBAAf,UACI,mBAAGyF,KAAI,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAO,GAAGxE,IAAKhB,UAAU,sBAAlC,SACI,sBAAMA,UAAU,QAAhB,gBAAyBwF,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAO,GAAGE,SAEvC,mBAAGD,KAAI,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAO,GAAGxE,IAAKhB,UAAU,2BAAlC,SACI,sBAAMA,UAAU,QAAhB,gBAAyBwF,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAO,GAAGE,mBAQ9CC,EAAa,WACtB,MAAkClF,mBAAS,IAA3C,mBAAOmF,EAAP,KAAkBC,EAAlB,KACA,EAA2DrF,IAAnDiC,EAAR,EAAQA,mBAAoB/B,EAA5B,EAA4BA,QAASE,EAArC,EAAqCA,MAAOiB,EAA5C,EAA4CA,WAE5C,SAASiE,IACLjE,IACAY,IAAqBD,KAAKqD,GAG9BjC,qBAAU,WACNkC,MACD,IAEH,IAAMnB,EAAe/D,EAAQ,cAAC,EAAD,IAAkB,KACzCmF,EAASrF,EAAU,cAAC,EAAD,IAAY,KAC/BsF,EAAYtF,GAAWE,EAA6C,KAApC,cAAC,EAAD,CAAgByE,KAAMO,IAE5D,OACI,sBAAK5F,UAAU,cAAf,UACK2E,EACAoB,EACAC,EACD,sBAAKhG,UAAU,qBAAf,UACI,qBAAKA,UAAU,mDAAf,gFAGA,qBAAKA,UAAU,oDAAf,mCACA,wBAAQA,UAAU,sBAAsB6E,QAASiB,EAAjD,SACI,sBAAM9F,UAAU,QAAhB,sBAEJ,qBAAKI,IAAK6F,EAAe3F,IAAI,wBAAwBN,UAAU,mCC5DlEkG,G,YAAmB,SAAC,GAAD,QAAEC,mBAAF,MAAgB,EAAhB,SAC5B,mCAEQ,YAAI/C,MAAM+C,GAAa9C,QAClBC,KAAI,SAACC,GAAD,OACD,qBAAIvD,UAAU,aAAd,UACI,qBAAKA,UAAU,6BACf,qBAAKA,UAAU,iCAFauD,UCDhD6C,EAAuB,IAEbC,EAAW,SAAC,GAAsD,IAArDC,EAAoD,EAApDA,WACvB,EAA0B7F,mBAAsB,IAAhD,mBAAO8F,EAAP,KAAcC,EAAd,KACA,EAA4C/F,mBAAwB,MAApE,mBAAOgG,EAAP,KAAuBC,EAAvB,KACA,EAAsClG,IAA9BE,EAAR,EAAQA,QAASwB,EAAjB,EAAiBA,iBAqBjB,SAASyE,IACL,OAAIjG,EAAgB,IAAIkG,SAAQ,SAACC,EAASC,GAAV,OAAqBD,OAC9C3E,EAAiBkE,GACnB5D,KAAKuE,GACL/C,SAAQ,WACLoC,GAAgB,KAI5B,SAASY,EAAazE,GAClB+D,EAAW/D,GACXmE,EAAkBnE,GAGtB,SAASwE,EAAiBE,GACtBT,GAAS,SAACU,GACP,OAAOA,EAAUC,OAAOF,MAnC/BrD,qBAAU,WACN,IAAMwD,EAAiB,WACnB,MAIIC,SAASC,gBAHTC,EADJ,EACIA,UACAC,EAFJ,EAEIA,aAIAD,EANJ,EAGIE,cAG4BD,EAAe,GAC3Cb,KAKR,OAFAA,IAAYnE,MAAK,kBAAMkF,OAAOC,iBAAiB,SAAUP,MAElD,WACHM,OAAOE,oBAAoB,SAAUR,MAE1C,IAsBH,IAAMS,EAAetB,EAAMjD,KAAI,SAAAwE,GAAO,IAAD,EAC3BC,EAAM,UAAGD,EAAGzD,UAAUC,YAAhB,aAAG,EAAmB0D,SAAS,iBAC3C,OACI,qBACIhI,UAAS,oBAAeyG,IAAmBqB,EAAGvF,GAAK,uBAAyB,IAC5E0F,SAAU,EAEVpD,QAAS,kBAAMmC,EAAac,EAAGvF,KAC/B2F,WAAY,SAACC,GACK,MAAVA,EAAEC,KAAyB,UAAVD,EAAEC,KACnBpB,EAAac,EAAGvF,KAP5B,UAWI,qBACInC,IAAK0H,EAAGzD,UAAUC,KAAO,IAAMwD,EAAGzD,UAAUE,UAC5CjE,IAAKwH,EAAGvC,KACRN,MAAO,CAAEoD,UAAWN,EAAS,QAAU,WAE3C,sBAAM/H,UAAU,4CAAhB,SAA6D8H,EAAGvC,SAb3DuC,EAAGvF,OAkBpB,OACI,qBAAKvC,UAAU,aAAf,SACI,qBAAIA,UAAU,aAAd,UACK6H,EACAnH,GAAW,cAAC,EAAD,UC9Ef4H,G,YAAW,WACpB,OACI,qCACI,mBAAGtI,UAAU,eAAb,0DACA,sBAAKA,UAAU,WAAf,UACI,sBAAKA,UAAU,yBAAf,UACI,qBAAKA,UAAU,2BACf,qBAAKA,UAAU,6BAEnB,qBAAKA,UAAU,0BACf,qBAAKA,UAAU,yBACf,qBAAKA,UAAU,yBACf,qBAAKA,UAAU,yBACf,qBAAKA,UAAU,yBACf,qBAAKA,UAAU,yBACf,qBAAKA,UAAU,yBACf,qBAAKA,UAAU,yBACf,qBAAKA,UAAU,yBACf,qBAAKA,UAAU,yBACf,qBAAKA,UAAU,iCCVlBuI,EAAW,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,OACvB,EAAkC/H,mBAA2B,MAA7D,mBAAOmF,EAAP,KAAkBC,EAAlB,KACA,EAAyDrF,IAAjD8B,EAAR,EAAQA,iBAAkB5B,EAA1B,EAA0BA,QAASE,EAAnC,EAAmCA,MAAOiB,EAA1C,EAA0CA,WAEpC+C,GAAalE,GAAWE,EAAQ,KAAO,cAAC,EAAD,IACvC+D,EAAe/D,EAAQ,cAAC,EAAD,IAAkB,KACzCoF,EAAYtF,GAAWE,IAAUgF,EAAwC,KAA3B,cAAC,EAAD,CAAMP,KAAMO,IAUhE,OARAhC,qBAAU,WACF4E,IACA3G,IACAS,EAAiBkG,GACZhG,KAAKqD,MAEf,CAAC2C,IAGA,mCACKA,GAAU,sBAAKxI,UAAU,aAAf,UACN4E,EACAD,EACAqB,QAMXyC,EAAO,SAAC,GAAiC,IAAD,MAA/BpD,EAA+B,EAA/BA,KACL0C,EAAM,UAAG1C,EAAKhB,UAAUC,YAAlB,aAAG,EAAqB0D,SAAS,iBAC7C,OACI,qCACI,sBAAKhI,UAAU,eAAf,UACI,qBACII,IAAKiF,EAAKhB,UAAUC,KAAO,IAAMe,EAAKhB,UAAUE,UAChDjE,IAAK+E,EAAKE,KACVN,MAAO,CAAEoD,UAAWN,EAAS,QAAU,WAE3C,gCACI,qBAAK/H,UAAU,gCAAf,SAAgDqF,EAAKE,OACrD,sBAAKvF,UAAU,aAAf,UACI,mBAAGyF,KAAK,IAAIzF,UAAU,sBAAtB,SACI,qBAAKA,UAAU,QAAf,wBAEJ,mBAAGyF,KAAK,IAAIzF,UAAU,2BAAtB,SACI,qBAAKA,UAAU,QAAf,6BAKhB,qBAAKA,UAAU,cAAf,SACKqF,EAAKC,aAAe,mEAEvB,UAACD,EAAK5B,OAAOiF,aAAb,aAAC,EAAmBC,SACnB,qCACD,qBAAK3I,UAAU,eAAf,qBACA,oBAAIA,UAAU,oBAAd,mBAEQqF,EAAK5B,OAAOiF,aAFpB,aAEQ,EAAmBpF,KAAI,SAACa,EAAMC,GAE1B,KAAIA,EAAI,GACR,OACI,oBAAIpE,UAAU,oBAAd,SAA2CmE,EAAKoB,MAATnB,eCxEtD,MAA0B,oCCM5BwE,EAAW,WAChB,MAAwCnI,qBAAxC,mBAAOoI,EAAP,KAAqBC,EAArB,KAEA,OACI,qCACQ,cAAC,EAAD,IACA,sBAAK9I,UAAU,gBAAf,UACQ,cAAC,EAAD,CAAUsG,WAAY,SAAC/D,GAAD,OAAQuG,EAAgBvG,MAC9C,cAAC,EAAD,CAAUiG,OAAQK,IAClB,qBAAK7I,UAAU,gBAAgBI,IAAK2I,EAAWzI,IAAI,kBCLzE0I,G,MAAY,SAAC,GAAD,YAAGC,EAAH,EAAGA,MAAH,OACd,sBAAKjJ,UAAU,eAAf,UACI,qBAAKI,KAAK,UAAA6I,EAAM5E,iBAAN,eAAiBC,MAAO,KAAxB,UAA8B2E,EAAM5E,iBAApC,aAA8B,EAAiBE,WAAWjE,IAAK2I,EAAMzE,MAAOxE,UAAU,sBAChG,sBAAKA,UAAU,qBAAf,UACI,oBAAIA,UAAU,qBAAd,SAAoCiJ,EAAMzE,QAC1C,mBAAGxE,UAAU,sBAAb,SAAoCiJ,EAAM3D,cAC1C,oBAAGtF,UAAU,sBAAb,UAAoCiJ,EAAMC,UAA1C,aACA,oBAAGlJ,UAAU,sBAAb,iCAA8CiJ,EAAME,mBAApD,aAA8C,EAAoB,GAAGC,YAJzE,UAKKH,EAAMxE,cALX,aAKK,EAAcnB,KAAI,SAAAc,GACf,GAAKA,EAAEsB,MAAStB,EAAEM,MAClB,OACI,sBAAK1E,UAAU,sBAAf,UAAsCoE,EAAEsB,KAAxC,KAAgDtB,EAAEM,MAAlD,aAIZ,cAAC,IAAD,CAAMzE,GAAG,UAAUD,UAAU,qBAA7B,8BAIKqJ,EAAc,WACvB,IAAQC,EAAYC,cAAZD,QACR,EAA4B7I,mBAAgB,IAA5C,mBAAQwI,EAAR,KAAeO,EAAf,KACA,EAAqDhJ,IAA7CuC,EAAR,EAAQA,aAAcnC,EAAtB,EAAsBA,MAAOF,EAA7B,EAA6BA,QAASmB,EAAtC,EAAsCA,WAEtC+B,qBAAU,WACN/B,IACAkB,EAAauG,GAAS9G,KAAKgH,KAC5B,CAACF,IAEJ,IAAMtD,EAAWpF,GAAUF,EAAuC,KAA7B,cAAC,EAAD,CAAWuI,MAAOA,IAEvD,OACI,qCACKjD,EACAtF,GAAW,cAAC,EAAD,IACXE,GAAS,cAAC,EAAD,QC3CT6I,EAAkB,WAC7B,OAAO,cAAC,EAAD,KC2BMC,MA1Bf,WACI,OACI,cAAC,IAAD,UACI,sBAAK1J,UAAU,MAAf,UACI,cAAC,EAAD,IACA,+BACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAO2J,OAAK,EAACrF,KAAK,IAAlB,SACI,cAAC,IAAD,CAAUrE,GAAG,kBAEjB,cAAC,IAAD,CAAOqE,KAAK,cAAZ,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOqF,OAAK,EAACrF,KAAK,UAAlB,SACI,cAAC,EAAD,MAEJ,cAAC,IAAD,CAAOA,KAAK,mBAAZ,SACI,cAAC,EAAD,iB,MCf5BsF,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzC,SAAS0C,eAAe,W","file":"static/js/main.7f5cfa39.chunk.js","sourcesContent":["import { NavLink, Link } from \"react-router-dom\";\r\n\r\nimport './appHeader.scss';\r\n\r\nexport const AppHeader = () => {\r\n    return (\r\n        <header className=\"app__header\">\r\n            <h1 className=\"app__title\">\r\n                <Link to=\"/\">\r\n                    <span>Marvel</span> information portal\r\n                </Link>\r\n            </h1>\r\n            <nav className=\"app__menu\">\r\n                <ul className=\"navigation\">\r\n                    <li className=\"navigation__item\"><NavLink to=\"/characters\" activeClassName=\"navigation__item_active\">Characters</NavLink></li>\r\n                    /\r\n                    <li className=\"navigation__item\"><NavLink to=\"/comics\" activeClassName=\"navigation__item_active\">Comics</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/avengers.c29e0ef0.png\";","export default __webpack_public_path__ + \"static/media/avengers_logo.9b944f71.png\";","import './appBanner.scss';\r\nimport avengersImg from '../../resources/images/avengers.png';\r\nimport avengersLogoImg from '../../resources/images/avengers_logo.png';\r\n\r\nexport const AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengersImg} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogoImg} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n","import {AllCharactersRes} from \"../../models/AllCharactersRes\";\r\nimport {Character} from \"../../models/Caracter\";\r\nimport {useHttp} from \"../../hooks/http.hook\";\r\nimport {AllComicsRes} from \"../../models/AllComicsRes\";\r\nimport {Comic} from \"../../models/Comic\";\r\n\r\nexport const useMarvelService = () => {\r\n    const { loading, request, error, clearError } = useHttp();\r\n    const baseUrl = 'https://gateway.marvel.com:443/v1/public';\r\n    const apiKey = process.env.REACT_APP_API_KEY;\r\n    const baseCharOffset = 210;\r\n    const baseComicsOffset = 0;\r\n\r\n    const getAllCharacters = async (offset: number = baseCharOffset): Promise<Character[]> => {\r\n        let res = await request<AllCharactersRes>(`${baseUrl}/characters?limit=9&offset=${offset}&${apiKey}`);\r\n        return res.data.results;\r\n    }\r\n\r\n    const getCharacterById = (id: number | string): Promise<Character> => {\r\n        return request<AllCharactersRes>(`${baseUrl}/characters/${id}?${apiKey}`)\r\n            .then(res => res.data.results[0]);\r\n    }\r\n\r\n    const getRandomCharacter = async (): Promise<Character> => {\r\n        const randId = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\r\n        return await getCharacterById(randId);\r\n    }\r\n\r\n    const getAllComics = async (offset = baseComicsOffset): Promise<Comic[]> => {\r\n        return request<AllComicsRes>(`${baseUrl}/comics?orderBy=issueNumber%2Cmodified&limit=8&offset=${offset}&${apiKey}`)\r\n            .then(res => res.data.results);\r\n    }\r\n\r\n    const getComicById = async (id: string | number): Promise<Comic> => {\r\n        return request<AllComicsRes>(`${baseUrl}/comics/${id}?${apiKey}`)\r\n            .then(res => res.data.results[0]);\r\n    }\r\n\r\n    return {\r\n        loading,\r\n        error,\r\n        clearError,\r\n        getAllCharacters,\r\n        getCharacterById,\r\n        getRandomCharacter,\r\n        getAllComics,\r\n        getComicById\r\n    };\r\n}\r\n\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState<null | string>(null);\r\n\r\n    const request = useCallback(async <ResType>(\r\n        url: string,\r\n        method: string = 'GET',\r\n        body = null,\r\n        headers:{[key: string]: string} = {'Content-Type': 'application/json'}\r\n    ): Promise<ResType> => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n            const data = await response.json();\r\n            if (data.code === 404) {\r\n                throw Error(data.status);\r\n            }\r\n            setLoading(false);\r\n\r\n            return data;\r\n        } catch (e) {\r\n            setLoading(false);\r\n            if (e instanceof Error) {\r\n                setError(e.message);\r\n            }\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError};\r\n}\r\n","import \"./errorMessage.scss\";\r\n\r\nexport const ErrorMessage = ({label = \"Hydra is currently attacking, sorry\"}: {label?: string}) => (\r\n    <div className=\"app__error-message\">\r\n        <span>404</span>\r\n        <p>{label}</p>\r\n    </div>\r\n)\r\n","import './ComicsListSkeleton.scss';\r\n\r\nexport const ComicsListSkeleton = ({comicsAmount = 8}: {comicsAmount?: number}) => (\r\n    <>\r\n        {\r\n            [...Array(comicsAmount).keys()]\r\n                .map((n) =>\r\n                    <li className=\"comics__item\" key={n}>\r\n                        <div className=\"pulse skeleton__comics-img\"/>\r\n                        <div className=\"pulse skeleton__comics-title\"/>\r\n                    </li>\r\n                )\r\n        }\r\n    </>\r\n)\r\n","import {Link} from \"react-router-dom\";\r\n\r\nimport \"./comicsList.scss\";\r\nimport {useMarvelService} from \"../../services/marvelService/MarvelService\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {Comic} from \"../../models/Comic\";\r\nimport {ErrorMessage} from \"../errorMessage/ErrorMessage\";\r\nimport {ComicsListSkeleton} from \"./comicsListSkeleton/ComicsListSkeleton\";\r\n\r\nexport const ComicsList = () => {\r\n    const { loading, error, getAllComics } = useMarvelService();\r\n    const [comics, setComics] = useState<Comic[]>([]);\r\n    const [offset, setOffset] = useState(0);\r\n\r\n    useEffect(() => {\r\n        onRequest(offset);\r\n    }, []);\r\n\r\n    const onRequest = (offset?: number) => {\r\n        getAllComics(offset)\r\n            .then(newComics => setComics((prev) => [...prev, ...newComics]))\r\n            .finally(() => setOffset(prevOffset => prevOffset + 8));\r\n    }\r\n\r\n    const renderComics = (arr: Comic[]) => {\r\n        return arr.map((item, i) => {\r\n            return (\r\n                <li className=\"comics__item\" key={i}>\r\n                    <Link to={`comics/${item.id}`}>\r\n                        <img src={item.thumbnail.path + '.' + item.thumbnail.extension} alt={item.title} className=\"comics__item-img\"/>\r\n                        <div className=\"comics__item-name\">{item.title}</div>\r\n                        <div className=\"comics__item-price\">{item.prices[0].price}</div>\r\n                    </Link>\r\n                </li>\r\n            )\r\n        });\r\n    }\r\n\r\n    const comicsList = renderComics(comics);\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const skeleton = loading ? <ComicsListSkeleton/> : null;\r\n\r\n    return (\r\n        <div className=\"comics__list\">\r\n            <ul className=\"comics__grid\">\r\n                {comicsList}\r\n                {errorMessage}\r\n                {skeleton}\r\n            </ul>\r\n            {!loading && <button className=\"button button__main button__long\" onClick={() => onRequest(offset)}>\r\n              <div className=\"inner\">load more</div>\r\n            </button>}\r\n        </div>\r\n    )\r\n}\r\n","import {AppBanner} from \"../components/appBanner/AppBanner\";\r\nimport {ComicsList} from \"../components/comicsList/ComicsList\";\r\n\r\nexport const ComicsPage = () => (\r\n    <>\r\n        <AppBanner/>\r\n        <ComicsList/>\r\n    </>\r\n)\r\n","export default __webpack_public_path__ + \"static/media/thor-weapon.b10f8e63.png\";","export default __webpack_public_path__ + \"static/media/loader.8ee2fdff.svg\";","import loaderImg from \"../../resources/images/loader.svg\";\r\n\r\nexport const Loader = () => <img src={loaderImg} alt=\"loader\" style={{ margin: \"auto\", display: \"block\" }}/>;\r\n","import \"./randomChar.scss\";\r\n\r\nimport thorWeaponImg from \"../../resources/images/thor-weapon.png\";\r\nimport {Character} from \"../../models/Caracter\";\r\nimport {useMarvelService} from \"../../services/marvelService/MarvelService\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {Loader} from \"../loader/Loader\";\r\nimport {ErrorMessage} from \"../errorMessage/ErrorMessage\";\r\n\r\nconst RandomCharView = ({char}: {char: Character}) => {\r\n    const {thumbnail, description, name, urls} = char;\r\n    return (\r\n        <div className=\"random-char__left\">\r\n            <img src={thumbnail?.path + '.' + thumbnail?.extension} alt=\"randomly picked marvel hero\" className=\"random-char__img\"/>\r\n            <div className=\"random-char__info\">\r\n                <p className=\"random-char__name title title_fs-22 title_upper\">{name}</p>\r\n                <p className=\"random-char__descr text\">\r\n                    {description || 'The information about this character was not found. To read more - follow the links below'}\r\n                </p>\r\n                <div className=\"random-char__buttons\">\r\n                    <a href={urls?.[0].url} className=\"button button__main\">\r\n                        <span className=\"inner\">{urls?.[0].type}</span>\r\n                    </a>\r\n                    <a href={urls?.[1].url} className=\"button button__secondary\">\r\n                        <span className=\"inner\">{urls?.[1].type}</span>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const RandomChar = () => {\r\n    const [character, setCharacter] = useState({} as Character);\r\n    const { getRandomCharacter, loading, error, clearError } = useMarvelService();\r\n\r\n    function fetchRandomCharacter() {\r\n        clearError();\r\n        getRandomCharacter().then(setCharacter);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchRandomCharacter();\r\n    }, []);\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const loader = loading ? <Loader/> : null;\r\n    const content = !(loading || error) ? <RandomCharView char={character}/>: null;\r\n\r\n    return (\r\n        <div className=\"random-char\">\r\n            {errorMessage}\r\n            {loader}\r\n            {content}\r\n            <div className=\"random-char__right\">\r\n                <div className=\"random-char__title title title_fs-24 title_white\">Random character for today!\r\n                    Do you want to get to know him better?\r\n                </div>\r\n                <div className=\"random-char__title  title title_fs-24 title_white\">Or choose another one</div>\r\n                <button className=\"button button__main\" onClick={fetchRandomCharacter}>\r\n                    <span className=\"inner\">Try it</span>\r\n                </button>\r\n                <img src={thorWeaponImg} alt=\"mjolnir with a shield\" className=\"random-char__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import \"./charListSkeleton.scss\";\r\n\r\nexport const CharListSkeleton = ({cardsAmount = 9}: {cardsAmount?: number}) => (\r\n    <>\r\n        {\r\n            [...Array(cardsAmount).keys()]\r\n                .map((n) =>\r\n                    <li className=\"char__item\" key={n}>\r\n                        <div className=\"pulse skeleton__card-img\"/>\r\n                        <div className=\"pulse skeleton__card-title\"/>\r\n                    </li>\r\n                )\r\n        }\r\n    </>\r\n)\r\n","import \"./charList.scss\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {useMarvelService} from \"../../services/marvelService/MarvelService\";\r\nimport {Character} from \"../../models/Caracter\";\r\nimport {CharListSkeleton} from \"./charListSkeleton/CharListSkeleton\";\r\n\r\nlet CHARS_OFFSET: number = 210;\r\n\r\nexport const  CharList = ({selectChar}: {selectChar: (id: number) => void}) => {\r\n    const [chars, setChars] = useState<Character[]>([]);\r\n    const [selectedCharId, setSelectedCharId] = useState<number | null>(null)\r\n    const { loading, getAllCharacters } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        const windowOnScroll = () => {\r\n            const {\r\n                scrollTop,\r\n                scrollHeight,\r\n                clientHeight\r\n            } = document.documentElement;\r\n\r\n            if (scrollTop + clientHeight >= scrollHeight - 5) {\r\n                loadChars();\r\n            }\r\n        }\r\n        loadChars().then(() => window.addEventListener('scroll', windowOnScroll));\r\n\r\n        return () => {\r\n            window.removeEventListener('scroll', windowOnScroll);\r\n        }\r\n    }, []);\r\n\r\n    function loadChars(): Promise<void> {\r\n        if (loading) return new Promise((resolve, reject) => resolve());\r\n        return getAllCharacters(CHARS_OFFSET)\r\n            .then(onCharListLoaded)\r\n            .finally(() => {\r\n                CHARS_OFFSET += 9;\r\n            });\r\n    }\r\n\r\n    function onSelectChar(id: number) {\r\n        selectChar(id);\r\n        setSelectedCharId(id);\r\n    }\r\n\r\n    function onCharListLoaded(newChars: Character[]) {\r\n        setChars((prevChars) => {\r\n           return prevChars.concat(newChars)\r\n        });\r\n    }\r\n\r\n    const charsContent = chars.map(ch => {\r\n        const hasImg = ch.thumbnail.path?.includes('not_available');\r\n        return (\r\n            <li\r\n                className={`char__item${selectedCharId === ch.id ? \" char__item_selected\" : \"\"}`}\r\n                tabIndex={0}\r\n                key={ch.id}\r\n                onClick={() => onSelectChar(ch.id)}\r\n                onKeyPress={(e) => {\r\n                    if (e.key === ' ' || e.key === \"Enter\") {\r\n                        onSelectChar(ch.id);\r\n                    }\r\n                }}\r\n            >\r\n                <img\r\n                    src={ch.thumbnail.path + '.' + ch.thumbnail.extension}\r\n                    alt={ch.name}\r\n                    style={{ objectFit: hasImg ? 'unset' : 'cover' }}\r\n                />\r\n                <span className=\"title title_upper title_white title_fs-22\">{ch.name}</span>\r\n            </li>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            <ul className=\"char__grid\">\r\n                {charsContent}\r\n                {loading && <CharListSkeleton/>}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n","import './skeleton.scss';\r\n\r\nexport const Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"/>\r\n                    <div className=\"pulse skeleton__block\"/>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"/>\r\n                <div className=\"pulse skeleton__mini\"/>\r\n                <div className=\"pulse skeleton__mini\"/>\r\n                <div className=\"pulse skeleton__mini\"/>\r\n                <div className=\"pulse skeleton__mini\"/>\r\n                <div className=\"pulse skeleton__mini\"/>\r\n                <div className=\"pulse skeleton__mini\"/>\r\n                <div className=\"pulse skeleton__mini\"/>\r\n                <div className=\"pulse skeleton__mini\"/>\r\n                <div className=\"pulse skeleton__mini\"/>\r\n                <div className=\"pulse skeleton__mini\"/>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import \"./charInfo.scss\";\r\nimport { Skeleton } from \"../skeleton/Skeleton\";\r\nimport {useEffect, useState} from \"react\";\r\nimport {Character} from \"../../models/Caracter\";\r\nimport {useMarvelService} from \"../../services/marvelService/MarvelService\";\r\nimport {ErrorMessage} from \"../errorMessage/ErrorMessage\";\r\n\r\ninterface CharInfoProps {\r\n    charId?: number;\r\n}\r\n\r\nexport const CharInfo = ({ charId }: CharInfoProps) => {\r\n    const [character, setCharacter] = useState<Character | null>(null);\r\n    const { getCharacterById, loading, error, clearError } = useMarvelService();\r\n\r\n    const skeleton =  !loading || error ? null : <Skeleton/>;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const content = !(loading || error || !character) ? <View char={character}/> : null;\r\n\r\n    useEffect(() => {\r\n        if (charId) {\r\n            clearError();\r\n            getCharacterById(charId)\r\n                .then(setCharacter)\r\n        }\r\n    }, [charId]);\r\n\r\n    return (\r\n        <>\r\n            {charId && <div className=\"char__info\">\r\n                {skeleton}\r\n                {errorMessage}\r\n                {content}\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n\r\nconst View = ({char}: { char: Character }) => {\r\n    const hasImg = char.thumbnail.path?.includes('not_available');\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img\r\n                    src={char.thumbnail.path + '.' + char.thumbnail.extension}\r\n                    alt={char.name}\r\n                    style={{ objectFit: hasImg ? 'unset' : 'cover' }}\r\n                />\r\n                <div>\r\n                    <div className=\"title title_fs-22 title_upper\">{char.name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href=\"#\" className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href=\"#\" className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {char.description || 'Unfortunately, no description was found for this character.'}\r\n            </div>\r\n            {!!char.comics.items?.length\r\n            && <>\r\n              <div className=\"char__comics\">Comics:</div>\r\n              <ul className=\"char__comics-list\">\r\n                  {\r\n                      char.comics.items?.map((item, i) => {\r\n                          // eslint-disable-next-line array-callback-return\r\n                          if (i > 9) return;\r\n                          return (\r\n                              <li className=\"char__comics-item\" key={i}>{item.name}</li>\r\n                          )\r\n                      })\r\n                  }\r\n              </ul>\r\n            </>}\r\n        </>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/bg-hero.4d6f9671.png\";","import {RandomChar} from \"../components/randomChar/RandomChar\";\r\nimport {CharList} from \"../components/charList/CharList\";\r\nimport {CharInfo} from \"../components/charInfo/CharInfo\";\r\nimport {useState} from \"react\";\r\nimport bgHeroImg from \"../resources/images/bg-hero.png\";\r\n\r\nexport const MainPage = () => {\r\n        const [selectedChar, setSelectedChar] = useState<number | undefined>();\r\n\r\n        return (\r\n            <>\r\n                    <RandomChar/>\r\n                    <div className=\"char__content\">\r\n                            <CharList selectChar={(id) => setSelectedChar(id)}/>\r\n                            <CharInfo charId={selectedChar}/>\r\n                            <img className=\"bg-decoration\" src={bgHeroImg} alt=\"vision\"/>\r\n                    </div>\r\n            </>\r\n        )\r\n}\r\n","import {Link, useParams} from \"react-router-dom\";\r\nimport {useEffect, useState} from \"react\";\r\n\r\nimport './singleComic.scss';\r\n\r\nimport {Comic} from \"../../models/Comic\";\r\nimport {useMarvelService} from \"../../services/marvelService/MarvelService\";\r\nimport {ErrorMessage} from \"../errorMessage/ErrorMessage\";\r\nimport {Loader} from \"../loader/Loader\";\r\n\r\nconst ComicView = ({ comic }: { comic: Comic }) => (\r\n    <div className=\"single-comic\">\r\n        <img src={comic.thumbnail?.path + '.' + comic.thumbnail?.extension} alt={comic.title} className=\"single-comic__img\"/>\r\n        <div className=\"single-comic__info\">\r\n            <h2 className=\"single-comic__name\">{comic.title}</h2>\r\n            <p className=\"single-comic__descr\">{comic.description}</p>\r\n            <p className=\"single-comic__descr\">{comic.pageCount} pages.</p>\r\n            <p className=\"single-comic__descr\">Language: {comic.textObjects?.[0].language}</p>\r\n            {comic.prices?.map(i => {\r\n                if (!i.type || !i.price) return;\r\n                return (\r\n                    <div className=\"single-comic__price\">{i.type}: {i.price}$</div>\r\n                )\r\n            })}\r\n        </div>\r\n        <Link to=\"/comics\" className=\"single-comic__back\">Back to all</Link>\r\n    </div>\r\n)\r\n\r\nexport const SingleComic = () => {\r\n    const { comicId } = useParams<{comicId: string}>();\r\n    const [ comic, setComic ] = useState<Comic>({} as Comic);\r\n    const { getComicById, error, loading, clearError } = useMarvelService();\r\n\r\n    useEffect(() => {\r\n        clearError();\r\n        getComicById(comicId).then(setComic);\r\n    }, [comicId]);\r\n\r\n    const content = !error && !loading ? <ComicView comic={comic}/> : null;\r\n\r\n    return (\r\n        <>\r\n            {content}\r\n            {loading && <Loader/>}\r\n            {error && <ErrorMessage/>}\r\n        </>\r\n    )\r\n}\r\n","import {SingleComic} from \"../../components/singleComic/singleComic\";\r\n\r\nexport const SingleComicPage = () => {\r\n  return <SingleComic/>\r\n}\r\n","import {HashRouter as Router, Redirect, Route, Switch} from \"react-router-dom\";\nimport {AppHeader} from \"../appHeader/AppHeader\";\nimport {ComicsPage, MainPage, SingleComicPage} from \"../../pages\";\n\nfunction App() {\n    return (\n        <Router>\n            <div className=\"app\">\n                <AppHeader/>\n                <main>\n                    <Switch>\n                        <Route exact path=\"/\">\n                            <Redirect to=\"/characters\"/>\n                        </Route>\n                        <Route path=\"/characters\">\n                            <MainPage/>\n                        </Route>\n                        <Route exact path=\"/comics\">\n                            <ComicsPage/>\n                        </Route>\n                        <Route path=\"/comics/:comicId\">\n                            <SingleComicPage/>\n                        </Route>\n                    </Switch>\n                </main>\n            </div>\n        </Router>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/App';\n\nimport \"./styles/styles.scss\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}